- hosts: localhost
  any_errors_fatal: true
  collections:
    - community.kubernetes
    - community.general
    - operator_sdk.util
    - kubernetes.core
    - ibm.mas_devops
    - ibm.cloudcollection

  vars: 
  # Cluster-wide dependencies for MAS 
    ibm_entitlement_key: "{{ ibm_entitlement_key }}"
    mas_workspace_id: "{{ mas_workspace_id }}"
    mas_workspace_name: "{{ mas_workspace_name }}"    
    mas_channel: "{{ mas_channel }}"
    
  # set defaults for core
    sls_compliance_enforce: "true"
    sls_mode: "prod"
    dns_provider: ""

    # Entitlement key can be passed by either the key or a secret name
    ibm_entitlement_secret: "{{ ibm_entitlement_secret }}"
    
  pre_tasks:
    # Check if Core is already installed first.  
    - include_tasks: "{{ playbook_dir }}/../tasks/preinstall_check_core.yml"
  
    # Lookup entitlement key via secret if it's declared and the ibm_entitlement_key isn't
    - include_tasks: "{{ playbook_dir }}/../tasks/lookup_entitlement.yml"

    # For the full set of supported environment variables refer to the playbook documentation
    - name: Check for required environment variables
      assert:
        that:
          - ibm_entitlement_key is defined and ibm_entitlement_key != ""
          - mas_workspace_id is defined and mas_workspace_id != ""
          - mas_workspace_name is defined and mas_workspace_name != ""
          - mas_channel is defined and mas_channel != ""
          - mas_instance_id is defined and mas_instance_id != ""
        fail_msg: "One or more required variables are not defined"

    # Create masconfig directory based on instance_id
    - include_tasks: "{{ playbook_dir }}/../tasks/masconfig_setup.yml"    

    # Setup DNS config secrets if provider is set
    - include_tasks: "{{ playbook_dir }}/../tasks/dns_setup.yml"
      when: dns_provider != ""

    # Set SLS mode set if required
    - name: "Set SLS config mode if required"
      when: (sls_mode is defined and sls_mode == "dev")
      set_fact:
        sls_compliance_enforce: "false"
      
  roles:
    # 1. Install cluster-scoped dependencies (e.g. SBO, Cert-Manager, Operator Catalogs) & cluster monitoring
    - role: ibm.mas_devops.ibm_catalogs
    - role: ibm.mas_devops.common_services
    - role: ibm.mas_devops.cert_manager

    # 2. Install MongoDb
    - role: ibm.mas_devops.mongodb
      vars:
        mongodb_storage_class: "{{ mongodb_storage_class }}"
    
    # 3. Install SLS
    # Set sls_url, sls_tls_crt_local_file_path, sls_registration_key variables to skip install and set up SLSCfg for
    # an existing installation of SLS
    - role: ibm.mas_devops.sls
      vars:
        sls_mongodb_cfg_file: "{{ mas_config_dir }}/mongo-mongoce.yml"

    # 4. Install UDS
    # Set uds_endpoint_url, uds_tls_crt_local_file_path, uds_api_key variables to skip install and set up BASCfg for
    # an existing installation of UDS
    - role: ibm.mas_devops.uds
      vars:
        uds_contact:
          email: "{{ uds_contact.email }}"
          first_name: "{{ uds_contact.first_name}}"
          last_name: "{{ uds_contact.last_name }}"
        uds_storage_class: "{{ uds_storage_class }}"

    # 5. Generate a Workspace config for MAS
    - role: ibm.mas_devops.gencfg_workspace
    
    # 6. Install & configure MAS
    - role: ibm.mas_devops.suite_dns
    - role: ibm.mas_devops.suite_install
      vars:
        mas_entitlement_key: "{{ ibm_entitlement_key }}"
    - role: ibm.mas_devops.suite_config
    - role: ibm.mas_devops.suite_verify
      vars:
        mas_hide_superuser_credentials: true