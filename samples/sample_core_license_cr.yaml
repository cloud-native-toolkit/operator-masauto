---
# Source: mas-core/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mas-core
  namespace: masauto-operator-system
  labels:
    helm.sh/chart: mas-core-0.2.0
    app.kubernetes.io/name: mas-core
    app.kubernetes.io/instance: mas-core
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    argocd.argoproj.io/sync-wave: "-100"
    helm.sh/hook-weight: "-100"
---
# Source: mas-core/templates/license-secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: sls-bootstrap
stringData:
  licensingId: hostId
  licensingKey: license
---
# Source: mas-core/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mas-core
  annotations:
    argocd.argoproj.io/sync-wave: "-6"
  labels:
    helm.sh/chart: mas-core-0.2.0
    app.kubernetes.io/name: mas-core
    app.kubernetes.io/instance: mas-core
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  copy-secret.sh: |
    #!/bin/bash

    SCRIPT_DIR=$(cd $(dirname "$0"); pwd -P)

    source "${SCRIPT_DIR}/helper-functions.sh"

    if [[ -z "${NAMESPACE}" ]]; then
      echo "NAMESPACE not set" &>2
      exit 1
    fi

    if [[ -z "${CURRENT_NAMESPACE}" ]]; then
      echo "CURRENT_NAMESPACE not set" &>2
      exit 1
    fi

    if [[ -z "${SECRET_NAME}" ]]; then
      echo "SECRET_NAME not set" &>2
      exit 1
    fi

    if [[ -z "${TARGET_SECRET}" ]]; then
      TARGET_SECRET="sls-bootstrap"
    fi

    set -ex

    # wait for secret
    check_k8s_resource "${CURRENT_NAMESPACE}" secret "${SECRET_NAME}" || exit 1

    # wait for namespace
    check_k8s_namespace "${NAMESPACE}" || exit 1

    oc get secret "${SECRET_NAME}" -o json | \
      jq --arg NS "${NAMESPACE}" --arg NAME "${TARGET_SECRET}" '{"apiVersion":.apiVersion,"type":.type,"kind":.kind,"metadata":{"name":$NAME,"namespace":$NS},"data":.data}' | \
      oc apply -f -
  helper-functions.sh: |
    #!/usr/bin/env bash

    check_k8s_namespace () {
      local NS="$1"

      count=0
      until kubectl get namespace "${NS}" 1> /dev/null 2> /dev/null || [[ $count -eq 60 ]]; do
        echo "Waiting for namespace: ${NS}"
        count=$((count + 1))
        sleep 60
      done

      if [[ $count -eq 60 ]]; then
        echo "Timed out waiting for namespace: ${NS}" >&2
        exit 1
      else
        echo "Found namespace: ${NS}. Sleeping for 30 seconds to wait for everything to settle down"
        sleep 30
      fi
    }

    check_k8s_resource () {
      local NS="$1"
      local GITOPS_TYPE="$2"
      local NAME="$3"

      echo "Checking for resource: ${NS}/${GITOPS_TYPE}/${NAME}"

      count=0
      local limit=60
      until kubectl get "${GITOPS_TYPE}" "${NAME}" -n "${NS}" 1> /dev/null 2> /dev/null || [[ $count -gt $limit ]]; do
        echo "Waiting for ${GITOPS_TYPE}/${NAME} in ${NS}"
        count=$((count + 1))
        sleep 60
      done

      if [[ $count -gt $limit ]]; then
        echo "Timed out waiting for ${GITOPS_TYPE}/${NAME}" >&2
        kubectl get "${GITOPS_TYPE}" -n "${NS}"
        exit 1
      fi

      kubectl get "${GITOPS_TYPE}" "${NAME}" -n "${NS}" -o yaml

      if [[ "${GITOPS_TYPE}" =~ deployment|statefulset|daemonset ]]; then
        kubectl rollout status "${GITOPS_TYPE}" "${NAME}" -n "${NS}" || exit 1
      elif [[ "${GITOPS_TYPE}" == "job" ]]; then
        kubectl get pods -n "${NS}" | grep "${NAME}"
        local pod_name=$(kubectl get pods -n "${NS}" | grep "${NAME}" | sed -E "s/^([^ ]+).*/\1/g")

        kubectl logs -n "${NS}" "${pod_name}"
        kubectl wait --for=condition=complete "job/${NAME}" -n "${NS}" --timeout=90m || exit 1
      fi

      echo "Done checking for resource: ${NS}/${GITOPS_TYPE}/${NAME}"
    }
---
# Source: mas-core/templates/license-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: license-job
  namespace: masauto-operator-system
  annotations:
    ansible.operator-sdk/reconcile-period: "0s"
    argocd.argoproj.io/sync-wave: "-5"
    helm.sh/hook-weight: "-5"
  labels:
    helm.sh/chart: mas-core-0.2.0
    app.kubernetes.io/name: mas-core
    app.kubernetes.io/instance: mas-core
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    metadata:
      labels:
        run: mas-core
    spec:
      serviceAccountName: mas-core
      volumes:
        - name: scripts
          configMap:
            name: mas-core
            defaultMode: 0777
      containers:
        - image: quay.io/cloudnativetoolkit/cli-tools-core:v1.1-v1.6.1
          name: toolkit
          env:
            - name: CURRENT_NAMESPACE
              value: mob-assist-dev
            - name: NAMESPACE
              value: ibm-sls
            - name: SECRET_NAME
              value: sls-bootstrap
          volumeMounts:
            - mountPath: /scripts
              name: scripts
          command:
            - /scripts/copy-secret.sh
      restartPolicy: Never
---
# Source: mas-core/templates/core.yaml
apiVersion: masauto.ibm.com/v1alpha1
kind: Core
metadata:
  name: masauto-core
  namespace: masauto-operator-system
  annotations:
    ansible.operator-sdk/reconcile-period: "0s"
    argocd.argoproj.io/sync-wave: "-5"
    helm.sh/hook-weight: "-5"
  labels:
    helm.sh/chart: mas-core-0.2.0
    app.kubernetes.io/name: mas-core
    app.kubernetes.io/instance: mas-core
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
spec:
  ibm_entitlement_secret: ibm-entitlement-key
  mas_instance_id: inst1
  mas_workspace_id: masdev
  mas_channel: 8.10.x
  mas_workspace_name: MAS Development
  mas_annotations: mas.ibm.com/operationalMode=production
  mongodb_storage_class: ocs-storagecluster-ceph-rbd
  uds_contact:
    email: youremail@us.ibm.com
    first_name: yourfirstname
    last_name: yourlastname
  uds_storage_class: ocs-storagecluster-ceph-rbd
